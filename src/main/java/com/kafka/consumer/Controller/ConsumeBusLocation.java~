package com.kafka.consumer.Controller;

import com.kafka.consumer.Models.BusTracker;
import com.kafka.consumer.Service.StationService;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.springframework.data.redis.core.ReactiveRedisOperations;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import reactor.core.publisher.Sinks;

@RestController
@RequestMapping("/consume")
public class ConsumeBusLocation {

    private final StationService stationService;
    private final Sinks.Many<BusTracker> sinkLastStation;
    private final Sinks.Many<String> sinkSpeed;

    // injecting new instance
    public ConsumeBusLocation(Sinks.Many<BusTracker> sinkLastStation, Sinks.Many<String> sinkSpeed, ReactiveRedisOperations<String, String> stationOps, StationService stationService) {
        this.stationService = stationService;
        this.sinkSpeed = sinkSpeed;
        this.sinkLastStation = sinkLastStation;

    }


    //  better handling for the backpressure to ensure the non-overwhelmed of mongodb or redis
    @KafkaListener(topics = "bus_location", groupId = "bus_location_id")
    public void consumeLastStation(ConsumerRecord<String, BusTracker> record) {
        if (record.value() == null) {
            System.out.println("Received a null value");
            return;
        }

        BusTracker lastLocation = record.value();

        Mono<Void> process = stationService.saveStation(lastLocation.getBusId(),
                        lastLocation.getLastStationLocation().getCoordinates().get(0),
                        lastLocation.getLastStationLocation().getCoordinates().get(1))
                .then(stationService.saveLastLocation(lastLocation.getBusId(),
                        lastLocation.getLastStationLocation().getCoordinates().get(0),
                        lastLocation.getLastStationLocation().getCoordinates().get(1)))
                .then(stationService.calculateSpeed(lastLocation.getBusId(),
                                lastLocation.getLastStationLocation().getCoordinates().get(0),
                                lastLocation.getLastStationLocation().getCoordinates().get(1))
                        .doOnNext(speed -> {
                            System.out.println("The speed is " + speed);
                            sinkSpeed.tryEmitNext(speed);
                        }))
                .then(Mono.fromRunnable(() -> {
                            System.out.println("The last station is " + lastLocation.toString());
                            sinkLastStation.tryEmitNext(lastLocation);
                        }
                ));

        process.subscribe();
    }

    //Streaming the speed
//    @GetMapping("/stream/speed")
//    private Flux<String> streamSpeed() {
//        return sinkSpeed.asFlux();
//    }
//
//
//    // Streaming the last station
//    @GetMapping("/stream/speed")
//    private Flux<BusTracker> streamLastStation() {
//        return sinkLastStation.asFlux();
//    }
}
//    @KafkaListener(topics = "bus_location", groupId = "bus_location_id")
//    public void consumeLastStation(ConsumerRecord<String, BusTracker> record) {
//        System.out.println("Consumed message: " + record.value());
//
//        if (record.value() != null) {
//            BusTracker lastLocation = record.value();
//            // save the station in redis
//            saveStation(lastLocation.getBusId(),
//                    lastLocation.getLastStationLocation().getCoordinates().get(0),
//                    lastLocation.getLastStationLocation().getCoordinates().get(1)
//            ).subscribe();
//            // save the last location in mongodb
//            saveLastLocation(lastLocation.getBusId(),
//                    lastLocation.getLastStationLocation().getCoordinates().get(0),
//                    lastLocation.getLastStationLocation().getCoordinates().get(1)
//            ).subscribe();
//            // calculate the speed of the bus
//            calculateSpeed(lastLocation.getBusId(), lastLocation.getLastStationLocation().getCoordinates().get(0), lastLocation.getLastStationLocation().getCoordinates().get(1)).subscribe(speed -> {
//                System.out.println("The speed is " + speed);
//                lastLocation.setLastStationTime(String.valueOf(System.currentTimeMillis()));
//                sinkSpeed.tryEmitNext(speed);
//            });
//            // broadcast the last location and the speed
//            sinkLastStation.tryEmitNext(lastLocation);
//
//
//        } else {
//            System.out.println("Received a null value");
//        }
//    }


